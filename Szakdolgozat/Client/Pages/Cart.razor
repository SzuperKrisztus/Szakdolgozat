@page "/cart"
@inject ICartService CartService
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IOrderService OrderService



<PageTitle>Kosár</PageTitle>

<h3>Kosár</h3>

@if (cartMeals == null || cartMeals.Count == 0)
{
    <p>@message</p>
}
else if (orderPlaced)
{
    <span>Thank you for your order! You can check your orders <a href="orders">here.</a></span>
}
else
{
    <div class="cart-container">
        <div class="cart-items">
            @foreach (var meal in cartMeals)
            {
                <div class="cart-item">
                    <div class="image-wrapper">
                        <img src="@meal.ImageUrl" class="image" />
                    </div>
                    <div class="details">
                        <div class="name-price">
                            <h5><a href="/meal/@meal.MealId">@meal.Name</a></h5>
                            <div class="price">@meal.MealType </div>
                            <input type="number" value="@meal.Quantity"
                                   @onchange="@((ChangeEventArgs eventArgs) => UpdateQuantity(eventArgs,meal))"
                                class="form-control, input-quantity"
                                min="1"/>
                            <div class="price">@(meal.Price * meal.Quantity) Ft</div>
                        </div>
                        <button class="remove-from-cart" @onclick="@( () => RemoveMealFromCart(meal.MealId, meal.MealTypeId) )">
                            Delete
                        </button>
                    </div>
                </div>
            }
        </div>
        <div class="cart-total">
            Összesen: @cartMeals.Sum(meal => meal.Price * meal.Quantity) Ft
        </div>
        <div class="cart-total">
            Összesen: @cartMeals.Sum(meal => meal.Quantity) db
        </div>
    </div>
    <button @onclick="PlaceOrder" class="btn btn-success float-right mt-1">Rendelés leadása</button>
}

@code {
        List<CartMealResponseDTO> cartMeals = null;
        string message = "Loading Cart...";
        bool isAuthenticated = false;
        bool orderPlaced = false;

    protected override async Task OnInitializedAsync()
    {
        orderPlaced = false;
        isAuthenticated = await AuthService.IsUserAuthenticated();
        await LoadCart();
    }

    private async Task RemoveMealFromCart(int mealId, int mealTypeId)
    {
        await CartService.RemoveMealFromCart(mealId, mealTypeId);
        await LoadCart();
    }

    private async Task LoadCart()
    {
        //await CartService.GetCartMealsCount();
        cartMeals = await CartService.GetCartMeals();
        if (cartMeals == null || cartMeals.Count == 0)
        {
            message = "Your cart is empty.";
        }
    }

    private async Task UpdateQuantity(ChangeEventArgs e, CartMealResponseDTO meal)
    {
        meal.Quantity = int.Parse(e.Value.ToString());
        if (meal.Quantity < 1)
            meal.Quantity = 1;
        await CartService.UpdateQuantity(meal);
    }

    private async Task PlaceOrder()
    {
       
        await OrderService.PlaceOrder();
        //await CartService.GetCartMealsCount();
        orderPlaced = true;
    }

    
}
